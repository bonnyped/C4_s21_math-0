#suite s21_sqrt_tests

#test s21_sqrt_1
  double a = 0;
  long double orig = sqrt(a);
  long double s21 = s21_sqrt(a);
  ck_assert_ldouble_eq_tol(orig, s21, 10e-7);

#test s21_sqrt_2
  double a = 777;
  double b = 777;
  long double orig = sqrt(a);
  long double s21 = s21_sqrt(a);
  ck_assert_ldouble_eq_tol(orig, s21, 10e-7);
  for (int i = 0; i < 11; i++) {
    a = (double)orig + 11.01;
    b = (double)s21 + 11.01;
    orig = sqrt(a);
    s21 = s21_sqrt(b);
    ck_assert_ldouble_eq_tol(orig, s21, 10e-7);
  }

  #test s21_sqrt_3
  double a = -1.2;
  long double orig = sqrt(a);
  long double s21 = s21_sqrt(a);
  ck_assert_ldouble_nan(orig);
  ck_assert_ldouble_nan(s21);
  
  
  
#test s21_sqrt_4
  double a = 0.001;
  long double orig = sqrt(a);
  long double s21 = s21_sqrt(a);
  ck_assert_ldouble_eq_tol(orig, s21, 10e-7);
  
#test s21_sqrt_5
  double a = 12310.2412;
  long double orig = sqrt(a);
  long double s21 = s21_sqrt(a);
  ck_assert_ldouble_eq_tol(orig, s21, 10e-7);
  
  
 #test s21_sqrt_6
  double a = 1.0/0.0;
  long double s21 = s21_sqrt(a);
  ck_assert_ldouble_infinite(s21);
  
  
 #test s21_sqrt_7
  double a = 0.0/0.0;
  long double orig = sqrt(a);
  long double s21 = s21_sqrt(a);
  ck_assert_ldouble_nan(orig);
  ck_assert_ldouble_nan(s21);
  
  
 #test s21_sqrt_8
  double a = -1.0/0.0;
  long double orig = sqrt(a);
  long double s21 = s21_sqrt(a);
  ck_assert_ldouble_nan(orig);
  ck_assert_ldouble_nan(s21);
